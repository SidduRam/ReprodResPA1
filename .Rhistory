?gather
gather(students, sex, count, -grade)
student2
Student2
Students2
students2
?gather
res <- gather(students2, sex_1)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sec", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
submit(0)
submit()
submit()
submit()
students3
submit()
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
stundets4
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?contains
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
month(this_day)
day(this_day)
wday(this_day)
wday(this_day, Lable = TRUE)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
calss(my_date)
class(my_date)
parse <- ymd("1989 May 17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy("25081985")
dmy(25081985)
ymd("192012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 43, seconds  = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
>now
?now
now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + days(2)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive)
with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time
last_time <- ymd("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
new_interval <- arrvve - last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
desturl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
file <- file.path(getwd(), "household_power_consumption.zip")
download.file(desturl, file)
# Set the required referenec library
require(data.table)
# Read data set after unzipping the data file
powerConsumption <- read.table(unz("household_power_consumption.zip", "household_power_consumption.txt"),
header=T, sep=";")
head(powerConsumption)
tail(powerConsumption)
# Subset the power consumption data - Only Feb. 1 and 2, 2007
powerCon2007 <- powerConsumption[as.character(powerConsumption$Date) %in% c("1/2/2007", "2/2/2007"),]
head(powerCon2007)
tail(powerCon2007)
powerCon2007$dateTime = paste(powerCon2007$Date, powerCon2007$Time)
# Convert to Date Time class
powerCon20072$dateTime <- strptime(powerCon2$dateTime, "%d/%m/%Y %H:%M:%S")
attach(powerConsumption2)
powerCon2007$dateTime <- strptime(powerCon22007$dateTime, "%d/%m/%Y %H:%M:%S")
powerCon2007$dateTime <- strptime(powerCon2007$dateTime, "%d/%m/%Y %H:%M:%S")
attach(powerCon2007)
# Creatr PNG image
png("plot1.png", width=480, height=480, units="px")
# Plot the distribution of global active power
hist(as.numeric(as.character(Global_active_power)), col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
# Shut down the graphic device
dev.off()
tail(powerCon2007)
# Subset the power consumption data - Only Feb. 1 and 2, 2007
powerCon2007 <- powerConsumption[as.character(powerConsumption$Date) %in% c("1/2/2007", "2/2/2007"),]
# combine both Date and Time variables & Value
powerCon2007$dateTime = paste(powerCon2007$Date, powerCon2007$Time)
# Convert to Date Time class
powerCon2007$dateTime <- strptime(powerCon2007$dateTime, "%d/%m/%Y %H:%M:%S")
attach(powerCon2007)
# Creatr PNG image
png("plot2.png", width=480, height=480, units="px")
# set the label and color to global active power plotting
plot(dateTime, as.numeric(as.character(Global_active_power)), type="l", xlab="", ylab="Global Active Power (kilowatts)")
#hist(as.numeric(as.character(Global_active_power)), col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
# Shut down the graphic device
dev.off()
# Set the required referenec library
require(data.table)
# Read data set after unzipping the data file
powerConsumption <- read.table(unz("household_power_consumption.zip", "household_power_consumption.txt"),
header=T, sep=";")
# Subset the power consumption data - Only Feb. 1 and 2, 2007
powerCon2007 <- powerConsumption[as.character(powerConsumption$Date) %in% c("1/2/2007", "2/2/2007"),]
# combine both Date and Time variables & Value
powerCon2007$dateTime = paste(powerCon2007$Date, powerCon2007$Time)
# Convert to Date Time class
powerCon2007$dateTime <- strptime(powerCon2007$dateTime, "%d/%m/%Y %H:%M:%S")
attach(powerCon2007)
# Creatr PNG image
png("plot3.png", width=480, height=480, units="px")
#  Plot Energy sub metering - Thursday to Fridat
#  Set the legend w/ color
plot(dateTime, as.numeric(as.character(Sub_metering_1)), type="l", xlab="", ylab="Energy sub metering", ylim=c(0,40))
dev.off()
# Creatr PNG image
png("plot3.png", width=480, height=480, units="px")
#  Plot Energy sub metering - Thursday to Fridat
#  Set the legend w/ color
plot(dateTime, as.numeric(as.character(Sub_metering_1)), type="l", xlab="", ylab="Energy sub metering", ylim=c(0,40))
lines(dateTime, as.numeric(as.character(Sub_metering_2)), col="red")
#lines(dateTime, as.numeric(as.character(Sub_metering_3)), col="blue")
#legend("topright", lty=1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3" ))
# Shut down the graphic device
dev.off()
# Creatr PNG image
png("plot3.png", width=480, height=480, units="px")
#  Plot Energy sub metering - Thursday to Fridat
#  Set the legend w/ color
plot(dateTime, as.numeric(as.character(Sub_metering_1)), type="l", xlab="", ylab="Energy sub metering", ylim=c(0,40))
lines(dateTime, as.numeric(as.character(Sub_metering_2)), col="red")
lines(dateTime, as.numeric(as.character(Sub_metering_3)), col="blue")
legend("topright", lty=1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3" ))
# Shut down the graphic device
dev.off()
# Creatr PNG image
png("plot4.png", width=480, height=480, units="px")
#  Plot in the row / or by column for 4 different segments
# Set the frame to plot 2  x 2
par(mfrow=c(2,2))
#1st plot - Global active power
plot(dateTime, as.numeric(as.character(Global_active_power)), type="l", xlab="", ylab="Global Active Power")
# Shut down the graphic device
dev.off()
# Creatr PNG image
png("plot4.png", width=480, height=480, units="px")
#  Plot in the row / or by column for 4 different segments
# Set the frame to plot 2  x 2
par(mfrow=c(2,2))
#1st plot (1*1) - Global active power
plot(dateTime, as.numeric(as.character(Global_active_power)), type="l", xlab="", ylab="Global Active Power")
#2nd plot (1*2) - Global active power
plot(dateTime, as.numeric(as.character(Voltage)), type="l", xlab="datetime", ylab="Voltage")
# Shut down the graphic device
dev.off()
# Creatr PNG image
png("plot4.png", width=480, height=480, units="px")
#  Plot in the row / or by column for 4 different segments
# Set the frame to plot 2  x 2
par(mfrow=c(2,2))
#1st plot (1*1) - Global active power
plot(dateTime, as.numeric(as.character(Global_active_power)), type="l", xlab="", ylab="Global Active Power")
#2nd plot (1*2) - Voltage
plot(dateTime, as.numeric(as.character(Voltage)), type="l", xlab="datetime", ylab="Voltage")
#3rd plot (2*1) - Energey sub metering
plot(dateTime, as.numeric(as.character(Sub_metering_1)), type="l", xlab="", ylab="Energy sub metering", ylim=c(0,40))
lines(dateTime, as.numeric(as.character(Sub_metering_2)), col="red")
lines(dateTime, as.numeric(as.character(Sub_metering_3)), col="blue")
legend("topright", lty=1, bty="n", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3" ))
#4th plot (2*2) - Global reactive power
plot(dateTime, as.numeric(as.character(Global_reactive_power)), type="l", xlab="datetime", ylab="Global_reactive_power")
# Shut down the graphic device
dev.off()
png(file="plot2_student2.png", width = 480, height =480)
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
# Read the data
fulltable <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, na.strings = "?")
# Extract data from 2007-02-01 and 2007-02-02
mydata <- fulltable[fulltable$Date %in% c("1/2/2007","2/2/2007"),]
# Convert Date and Time variables
mydata$Date <- as.Date(mydata$Date , "%d/%m/%Y")
mydata$Time <- paste(mydata$Date, mydata$Time, sep=" ")
mydata$Time <- strptime(mydata$Time, "%Y-%m-%d %H:%M:%S")
# Save plot as PNG file
png(file="plot2_student2.png", width = 480, height =480)
# Make the plot
plot(mydata$Time, mydata$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
# Close graphics device
dev.off()
data <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, stringsAsFactors=F)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# Get the data subset from the dates 2007-02-01 and 2007-02-02 and remove original data
dataSub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data)
## Plot 1
hist(dataSub$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1_stud3.png", height=480, width=480)
dev.off()
#Load the data
powConm<-read.csv("household_power_consumption.txt", sep=";", na.strings = "?", skipNul = TRUE, colClasses=c("character", "character", rep("numeric",7)))
powConm$Date<-as.Date(powConm$Date, "%d/%m/%Y")
powConm<-powConm[powConm$Date >= as.Date("01/02/2007", "%d/%m/%Y") & powConm$Date <= as.Date("02/02/2007", "%d/%m/%Y"),]
powConm$Weekday<-weekdays(powConm$Date)
#draw picture
png(file="plot1_student4.png", bg="transparent")
hist(powConm$Global_active_power, xlab="Global active power(kilowatts)", ylab="Fraquency", main="Global active power", col="red")
dev.off()
powConm<-read.csv("household_power_consumption.txt", sep=";", na.strings = "?", skipNul = TRUE, colClasses=c("character", "character", rep("numeric",7)))
powConm$DateTime<-strptime(paste(powConm$Date, powConm$Time), "%d/%m/%Y %H:%M:%OS")
powConm<-powConm[powConm$DateTime >= strptime("01/02/2007 00:00:00", "%d/%m/%Y %H:%M:%OS") & powConm$DateTime <= strptime("03/02/2007 00:00:00", "%d/%m/%Y %H:%M:%OS"),]
powConm$Weekday<-weekdays(as.Date(powConm$DateTime))
#draw picture
png(file="plot2.png", bg="transparent")
plot(x=powConm$DateTime, y=powConm$Global_active_power, xlab="", ylab="Global active power(kilowatts)", type="l")
dev.off()
#load the data
powConm<-read.csv("household_power_consumption.txt", sep=";", na.strings = "?", skipNul = TRUE, colClasses=c("character", "character", rep("numeric",7)))
powConm$DateTime<-strptime(paste(powConm$Date, powConm$Time), "%d/%m/%Y %H:%M:%OS")
powConm<-powConm[powConm$DateTime >= strptime("01/02/2007 00:00:00", "%d/%m/%Y %H:%M:%OS") & powConm$DateTime <= strptime("03/02/2007 00:00:00", "%d/%m/%Y %H:%M:%OS"),]
powConm$Weekday<-weekdays(as.Date(powConm$DateTime))
#draw picture
png(file="plot4-student4.png", bg="transparent")
par(mfcol=c(2,2))
plot(x=powConm$DateTime, y=powConm$Global_active_power, xlab="", ylab="Global active power(kilowatts)", type="l")
plot(x=powConm$DateTime, y=powConm$Sub_metering_1, xlab="",ylab="Energy sub metering", type="l")
lines(x=powConm$DateTime, y=powConm$Sub_metering_2, col="red")
lines(x=powConm$DateTime, y=powConm$Sub_metering_3, col="blue")
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3") )
plot(x=powConm$DateTime, y=powConm$Voltage, xlab="datetime", ylab="Voltage",type="l")
plot(x=powConm$DateTime, y=powConm$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
dev.off()
#load the data
powConm<-read.csv("household_power_consumption.txt", sep=";", na.strings = "?", skipNul = TRUE, colClasses=c("character", "character", rep("numeric",7)))
powConm$DateTime<-strptime(paste(powConm$Date, powConm$Time), "%d/%m/%Y %H:%M:%OS")
powConm<-powConm[powConm$DateTime >= strptime("01/02/2007 00:00:00", "%d/%m/%Y %H:%M:%OS") & powConm$DateTime <= strptime("03/02/2007 00:00:00", "%d/%m/%Y %H:%M:%OS"),]
powConm$Weekday<-weekdays(as.Date(powConm$DateTime))
#draw pictures
png(file="plot3_student4.png", bg="transparent")
plot(x=powConm$DateTime, y=powConm$Sub_metering_1, xlab="",ylab="Energy sub metering", type="l")
lines(x=powConm$DateTime, y=powConm$Sub_metering_2, col="red")
lines(x=powConm$DateTime, y=powConm$Sub_metering_3, col="blue")
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3") )
dev.off()
downloadFile <- function() {
if(!file.exists("data")){
dir.create("data")
}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile="./data/cameras.csv")
dateDownloaded <- date()
list.files("./data")
}
readFile <-function(propValue){
filedata <- read.csv("./data/cameras.csv")
print(table(filedata$VAL))
mydata <- read.table("./data/cameras.csv", sep="\t", header=TRUE)
#str(mydata)
valGr1M <- mydata[mydata$VAL >= 24,]
print(nrow(valGr1M))
}
str(mydata)
readFile
readFile(10)
#Download the NGAP data in excel format
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile="./data/NGAP.xlsx", mode="wb")
dateDownloaded <- date()
list.files("./data")
#Read the NGAP data from downloaded xlsx
install.packages("rJava")
install.packages("xlsx")
library(rJava)
library(xlsx)
fileData <- read.xlsx("./data/NGAP.xlsx", sheetIndex=1, header=TRUE)
head(fileData)
# Read the data for particular rows and cols mentioned below
colIndex = 7:15
rowIndex = 8:23
dat <- read.xlsx("./data/NGAP.xlsx", sheetIndex=1, colIndex=colIndex,rowIndex=rowIndex)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
xmlURL <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlURL2 <- sub('https', 'http', xmlURL)
doc <- xmlTreeParse(xmlURL2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[3]]
#xmlSApply(rootNode,xmlValue)
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
table(zipcode ==21231)
install.packages("XML")
library(XML)
library(XML)
xmlURL <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlURL2 <- sub('https', 'http', xmlURL)
doc <- xmlTreeParse(xmlURL2,useInternal=TRUE)
library(XML)
xmlURL <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlURL2 <- sub('https', 'http', xmlURL)
doc <- xmlTreeParse(xmlURL2,useInternal=TRUE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(fileURL, f)
require(data.table)
DT <- fread(f)
t1 <- system.time(y1 <- mean(DT$pwgtp15,by=DT$SEX))
print(t1)
t2 <- system.time(y2 <- tapply(DT$pwgtp15,DT$SEX,mean))
print(t2)
t3 <- system.time(y3 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
print(t3)
t4 <- system.time(y4 <- sapply(split(DT$pwgtp15, DT$SEX), mean))
print(t4)
t5 <- system.time(y5 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
print(t5)
install.packages("XML")
library(XML)
install.packages("XML")
xmlURL <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlURL <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlURL2 <- sub('https', 'http', xmlURL)
xmlURL2 <- sub('https', 'http', xmlURL)
doc <- xmlTreeParse(xmlURL2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
doc <- xmlTreeParse(xmlURL1,useInternal=TRUE)
library(XML)
doc <- xmlTreeParse(xmlURL1,useInternal=TRUE)
xmlURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(xmlURL1,useInternal=TRUE)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "eff0afa3d57bc8fa0df7", secret="384c8c9b8eb164f2768330cd9d3b7d81a4e6d5de")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
#Q1 - Answer
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
require(data.table)
dt <- data.table(read.csv(f))
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode="wb")
library(jpeg)
## get help
library(help = jpeg)
img <- readJPEG(f, native=TRUE)
quantile(img, probs=c(0.3, 0.8))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
require(data.table)
dtGDP <- data.table(read.csv(f, skip=4, nrows=215))
head(dtGDP)
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
head(dtGDP)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dim(dtEd)
str(dtEd)
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(dt$rankingGDP)))
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing=TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
dt[order(rankingGDP, decreasing=TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][1:13]
#Q4 Answer - Use the same data of Q3
dt[, mean(rankingGDP, na.rm=TRUE), by=Income.Group]
breaks <- quantile(dt$rankingGDP, probs=seq(0, 1, 0.2), na.rm=TRUE)
dt$quantileGDP <- cut(dt$rankingGDP, breaks=breaks)
dt[Income.Group == "Lower middle income", .N, by=c("Income.Group", "quantileGDP")]
list.files("./data")
list.files("./data/UCI HAR Dataset")
path <- getwd()
path
pathIn <- file.path(path, "UCI HAR Dataset")
list.files(pathIn, recursive=TRUE)
pathIn <- file.path(path, "UCI HAR Dataset")
list.files(pathIn, recursive=TRUE)
# 1. Merge the 'Train' and 'Test' data into one dataset
dt_x_train <- read.table("train/X_train.txt")
dt_y_train <- read.table("train/y_train.txt")
dtSubjectTrain <- read.table("train/subject_train.txt")
dt_x_test <- read.table("test/X_test.txt")
dt_y_test <- read.table("test/y_test.txt")
dtSubjectTest <- read.table("test/subject_test.txt")
# create 'x' data set
dt_x_data <- rbind(dt_x_train, dt_x_test)
# create 'y' data set
dt_y_data <- rbind(dt_y_train, dt_y_test)
# create 'subject' data set
dtSubject_data <- rbind(dtSubjectTrain, dtSubjectTest)
file.path(pathIn, "train", "subject_train.txt")
dt_x_train <- read.table(file.path(pathIn, "train", "X_train.txt"))
dt_y_train <- read.table(file.path(pathIn, "train", "y_train.txt"))
dtSubjectTrain <- read.table(file.path(pathIn, "train", "subject_train.txt"))
dt_x_test <- read.table(file.path(pathIn, "test", "X_test.txt")
dt_y_test <- read.table(file.path(pathIn, "test", "y_test.txt")
dtSubjectTest <- read.table(file.path(pathIn, "test", "subject_test.txt"))
dt_x_test <- read.table(file.path(pathIn, "test", "X_test.txt"))
dt_y_test <- read.table(file.path(pathIn, "test", "y_test.txt"))
dtSubjectTest <- read.table(file.path(pathIn, "test", "subject_test.txt"))
# create 'x' data set
dt_x_data <- rbind(dt_x_train, dt_x_test)
# create 'y' data set
dt_y_data <- rbind(dt_y_train, dt_y_test)
# create 'subject' data set
dtSubject_data <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject_data, "V1", "subject")
str(dtSubject_data)
dim(dtSubject_data)
---
setwd("C:/Data-Science/Reproducible Research")
getwd()
